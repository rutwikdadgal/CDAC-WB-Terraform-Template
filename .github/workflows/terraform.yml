# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: staging

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Cloud authentication
      run: |
          echo "TFC_TOKEN=${{ secrets.TFC_TOKEN }}" >> $GITHUB_ENV
          echo "TFC_ORG=${{ secrets.TFC_ORG }}" >> $GITHUB_ENV
          echo "TFC_WORKSPACE=${{ secrets.TFC_WORKSPACE }}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
          terraform init \
          -backend-config="hostname=app.terraform.io" \
          -backend-config="organization=${{ secrets.TFC_ORG }}" 
      env:
        TF_VAR_client_secret: ${{ secrets.client_secret }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    #   continue-on-error: true

    # Generates an execution plan for Terraform

    - name: Trigger Plan in Terraform Cloud
      id: plan
      run: |
          # Trigger Plan Action in Terraform Cloud
          response=$(curl --silent \
            --request POST \
            --url "https://app.terraform.io/api/v2/workspaces/${{ secrets.TFC_WORKSPACE }}/actions" \
            --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --data '{
              "data": {
                "type": "plan"
              }
            }')
          echo "Terraform Plan triggered: $response"
          # Wait for the plan to complete
          plan_id=$(echo $response | jq -r '.data.id')
          echo "Waiting for Plan to finish..."
          sleep 10 # Wait for the plan to be processed, adjust if needed
          curl --silent \
            --request GET \
            --url "https://app.terraform.io/api/v2/plans/$plan_id" \
            --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json"
      
    - name: Trigger Apply in Terraform Cloud (Auto-Approve)
      id: apply
      run: |
          # Trigger Apply Action in Terraform Cloud with auto-approve
          response=$(curl --silent \
            --request POST \
            --url "https://app.terraform.io/api/v2/workspaces/${{ secrets.TFC_WORKSPACE }}/actions" \
            --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --data '{
              "data": {
                "type": "apply",
                "attributes": {
                  "auto-approve": true
                }
              }
            }')
          echo "Terraform Apply triggered: $response"
          # Wait for the apply to complete
          apply_id=$(echo $response | jq -r '.data.id')
          echo "Waiting for Apply to finish..."
          sleep 10 # Wait for the apply to be processed, adjust if needed
          curl --silent \
            --request GET \
            --url "https://app.terraform.io/api/v2/applies/$apply_id" \
            --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json"
